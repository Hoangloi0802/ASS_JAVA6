package ass.java6.ass.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import ass.java6.ass.Config.SendEmailConfig;
import ass.java6.ass.Dto.DangkyRequest;  
import ass.java6.ass.Dto.DatlaimkRequest;
import ass.java6.ass.Entity.Account;
import ass.java6.ass.Repository.AccountRepository;
import ass.java6.ass.Service.AccoutService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

@Controller
public class LoginController {

    @Autowired
    private AccountRepository accountRepository;
    @Autowired
    private AccoutService accoutService;
    @Autowired
    private SendEmailConfig sendEmailConfig;
    @GetMapping("/Dangky")
    public String Dangky(Model model) {
        model.addAttribute("dangkyaccout", new DangkyRequest());
        return "login/Dangky";
    }

    @PostMapping("/Dangky")
    public String DangkyPost(@Valid @ModelAttribute("dangkyaccout") DangkyRequest dangkyRequest, BindingResult result,
        HttpSession session, Model model) {
    if (result.hasErrors()) {
        return "login/Dangky";
    }
    try {
        Account account = accoutService.Dangky(dangkyRequest);
        session.setAttribute("account", account);
        session.removeAttribute("otp");
        String otpCode = sendEmailConfig.generateOtp();
        session.setAttribute("otp", otpCode);
        System.out.println("üìß G·ª≠i OTP ƒë·∫øn email: " + account.getEmail() + " - M√£ OTP: " + otpCode);
        String link = "http://localhost:8080/checkotp";
        String subject = "X√°c nh·∫≠n m√£ OTP ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n";
        String content = sendEmailConfig.generateOtpEmailContent(otpCode, link);
        sendEmailConfig.sendEmail(account.getEmail(), subject, content);  
        return "login/otp";
    } catch (IllegalArgumentException e) {
        model.addAttribute("errorMessage", e.getMessage());
        return "login/Dangky";
    }
}
    @GetMapping("/Dangnhap")
    public String dangnhap(Model model ,@RequestParam(value = "error", required = false)String error) {
        if (error != null) {
            if ("invalid_credentials".equals(error)) {
                model.addAttribute("errorMessage", "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá!");
            } else {
                model.addAttribute("errorMessage", "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh!");
            }
        }
        model.addAttribute("dangnhapRequest", new DangkyRequest());
        return "login/Dangnhap";
    }    
    @GetMapping("/checkotp")
    public String check() {
        return "login/otp";
    }
    @PostMapping("/checkotp")
    public String checkotp(@RequestParam(value = "otpInput", required = false) Integer otpinput, HttpSession session, Model model) {
        if (otpinput == null) {
            model.addAttribute("errorMessage", "OTP kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            return "login/otp";
        }
        try {
            accoutService.Xacthuc(session, otpinput);
        model.addAttribute("message", "X√°c th·ª±c OTP th√†nh c√¥ng.");
        return "redirect:/login/Dangnhap";
        } catch (IllegalArgumentException e) {
            model.addAttribute("errorMessage", e.getMessage());
            return "login/otp";
        }    
        
    }
    @GetMapping("/otpquenmk")
    public String checkquenmk() {

        return "login/otpquenmk";
    }
    @PostMapping("/otpquenmk")
    public String checkquenmkPost(@RequestParam("otpInput") String otpInput, HttpSession session, Model model) {
        try {
            accoutService.Checkotpquenmk(session, otpInput);
            return "login/datlaimatkhau";
        } catch (IllegalArgumentException e) {
            model.addAttribute("message", e.getMessage());
            return "login/otpquenmk";
        }
    }
    @GetMapping("/quenmk")
    public String quenmk() {
        
        return "login/quenmk";
    }
    @PostMapping("/quenmk")
    public String quenmkPost(Model model ,@RequestParam("emailInput") String email ,HttpSession session){
        if(email == null){
            model.addAttribute("message", "email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            return "login/otp";
            
        }
        if(accountRepository.findByEmail(email).isPresent()){
            String otp = sendEmailConfig.generateOtp();
            session.setAttribute("otp", otp);
            session.setAttribute("emailcheck" ,email);
            String link = "http://localhost:8080/quenmk";
            String subject = "X√°c nh·∫≠n m√£ OTP ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n";
            String content = sendEmailConfig.generateOtpEmailContent(otp, link);
            sendEmailConfig.sendEmail(email, subject, content);
            return "login/otpquenmk";
        }else{
            model.addAttribute("message", "email kh√¥ng t·ªìn t·∫°i");
        }
         return "login/otpquenmk";
    }
    
    @PostMapping("/datlaimk")
    public String datlaimkPost(@Valid @ModelAttribute("datlaimkRequest") DatlaimkRequest datlaimkRequest ,BindingResult result, HttpSession session, Model model) {
        if(result.hasErrors()){
             return "login/datlaimatkhau";
        }
        String email = (String) session.getAttribute("emailcheck");
        if (email == null) {
            model.addAttribute("message", "Kh√¥ng t√¨m th·∫•y email, vui l√≤ng th·ª≠ l·∫°i.");
            return "login/datlaimatkhau";
        }
        if (!datlaimkRequest.getPassword().equals(datlaimkRequest.getConfirmPassword())) {
            model.addAttribute("message", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.");
            return "login/datlaimatkhau";
        }
        try {
            accoutService.doiMatKhau(email, datlaimkRequest.getPassword());
            session.removeAttribute("emailcheck");
            return "redirect:/login?success";
        } catch (IllegalArgumentException e) {
            model.addAttribute("message", e.getMessage());
            return "login/datlaimatkhau";
        }
    }
        @GetMapping("/datlaimk")
    public String datlaimk(Model model) {
        model.addAttribute("datlaimkRequest", new DatlaimkRequest());
        return "login/datlaimatkhau";
    }
    
    @PostMapping("/goilaiotp")
public String resendOtp(HttpSession session, Model model) {
    try {
        // L·∫•y t√†i kho·∫£n t·ª´ session
        Account account = (Account) session.getAttribute("account");
        if (account == null) {
            model.addAttribute("errorMessage", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë·ªÉ g·ª≠i l·∫°i OTP.");
            return "login/otp";
        }  
        session.removeAttribute("otp");

        // T·∫°o OTP m·ªõi
        String otpCode = sendEmailConfig.generateOtp();
        session.setAttribute("otp", otpCode);
        
        // G·ª≠i email OTP m·ªõi
        String link = "http://localhost:8080/checkotp";
        String subject = "üîê X√°c nh·∫≠n m√£ OTP m·ªõi";
        String content = sendEmailConfig.generateOtpEmailContent(otpCode, link);
        sendEmailConfig.sendEmail(account.getEmail(), subject, content);
        
        // Debug
        System.out.println("üìß G·ª≠i l·∫°i OTP ƒë·∫øn email: " + account.getEmail() + " - M√£ OTP m·ªõi: " + otpCode);
        
        model.addAttribute("message", "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.");
    } catch (Exception e) {
        model.addAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra khi g·ª≠i l·∫°i OTP. Vui l√≤ng th·ª≠ l·∫°i!");
    }

    return "login/otp";
}


    
    
}
